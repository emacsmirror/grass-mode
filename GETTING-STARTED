* Overview
grass-mode is actually two closely related modes. igrass-mode handles the grass
program itself, and is a variant of Emacs' standard shell-mode. If you use M-x
shell you'll be right at home. sgrass-mode is for editing grass script files,
and allows you to pass code directly from the script to the process in the
igrass buffer.

* Installation
Basic installation details are in the grass.emacs file. Read through
that and make sure the configuration variables are pointed at the right
locations. You must have yas/snippet installed, and may optionally want
to install w3m.

* Starting a session
You can start a new grass session with `M-x grass`. You will be prompted
for a location, then a mapset. Grass will have already scanned your
grassdata directory, so it knows what locations you have, and will offer
tab-completion for them. Once the location is selected, it will scan the
mapsets for that location, so you can again use tab completion to select
your mapset.

* Shell-mode features
Grass should now start in the selected location and mapset. The initial
prompt is a little messy, but if you hit return once it should look
normal. You are now in 'igrass-mode', which serves as a front-end to the
grass inferior process. This mode is derived from shell-mode, so if you
use M-x shell, all of your favourite commands should be available, and
tab-completion now includes all of your Grass programs and scripts. Some of the
key features are:

 - M-p and M-n cycle to the previous and next item in the command-line history,
   respectively. (comint-previous-input and comint-next-input)

 - M-r invokes Regexp-history interactive search, which allows you to use
   regular expressions to search through your command history.

 - Moving the cursor to a previous command line and pressing ENTER will send
   that line to Grass to be run again. C-ENTER copies the command to the next
   prompt so you can edit it before running it.

 - C-c C-p moves the cursor back to the previous input, sort of, but it's buggy
   (my fault, I don't know why). C-c C-o normally clears the last output, but it
   looks like I may have broken that completely in igrass-mode.

There are the commands I use most often in shell mode, but careful study will
doubtless reveal more that you may find useful.

* Reading the Fine Manual
Both igrass-mode and sgrass-mode know where the html help files are, and you can
browse them with C-c C-v. Depending on your configuration, you will get see the
files displayed by w3m in an Emacs window, or the files will pop up in your
default browser. Tab completion works for command names here, so, for instance,
r.TAB will give you a list of all the raster help files.

w3m has the potential to be a wonderful help browser, but I haven't figured out
how to best assign it to particular windows.

* Command line completion
With some minor tweaks, shell mode gives us command completion. I have started
to add parameter completion. I started out with yas/snippet, as it's the easiest
method to understand. pcomplete sounds better, but I don't understand it yet. A
few examples of what's to come have been implemented:

Several commands use the maps parameter. If you type, for example:

  d.vect map=

and then hit the TAB key, igrass-mode will prompt you for a vector map,
with tab-completion, using the maps available in your current mapset. Similarly,

  d.rast map=

is completed with a list of raster maps. This is done by scanning the preceding
command, looking for the words vect or rast. In cases where this simple approach
doesn't work, you will be asked if you want a vector or raster map first, (y or
v for vector, r or n for raster), and then offered the appropriate completion.

Eventually, igrass will also provide parameter completion. At the moment, as a
test case, I have only completed d.vect, d.rast, d.what.rast, and d.mon. If you
enter any of these commands on the command-line, and somewhere on that line type
;TAB, you will be offered the appropriate parameters as completion options. Once
I write the code to automatically parse the help files to extract all the
parameters for each command, this feature will work for every grass command.

* Changing locations
Now that I've got a handle on completions with yas/snippet, it will be
straightforward to set up g.mapset to prompt for location and mapset. Until
that's done, though, you can change locations with C-c C-l. Just follow the
prompts.

* sgrass mode
This is the mode for editing Grass script files. At present, it doesn't know
when you want to use it, so you have to call it specifically after opening a
script file: M-x sgrass-mode. It is derived from sh-mode, so if you've used that
mode before you will have access to its features. I haven't actually used
sh-mode much, but a bash-script mode seemed like a good place to start building
a grass-script mode.

Once you've started sgrass-mode, you have access to the same parameter
completion and map-lookup features as igrass. It doesn't yet support program
completion (d.vect, d.redraw etc).

You can interact with the Grass process. Currently, it's pretty basic: C-c C-r
will pass the active region, C-c C-n will pass the current line. You also have
access to the help (C-c C-v), and can change the location with C-c C-l. Note
that the location and mapset are shared between igrass and sgrass mode. 

sgrass mode currently relies on igrass-mode being set up first. In future, It
won't be hard to get sgrass running independently, with multiple files each in
different locations and/or mapsets. However, I don't know yet how to handle
running multiple instance of Grass, but it might be possible too.
